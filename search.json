[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Optimization for ML",
    "section": "",
    "text": "Optimization for ML\n\nCourse for 3rd year students of CS department at HSE university. 1 lecture + 1 seminar per week.\nThe course covers convex, non-convex, continuous optimization topics, especially motivated by problems and applications in Machine Learning. Various topics are covered, from fundamental materials to recent research.\nDescription of the course.\n\n                        \n                                            \n\n\nTeam\n\n\n    \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Daniil Merkulov\n                    \n                    Instructor\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Farukh Yaushev\n                    \n                    Seminarist\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Kirill Nikorov\n                    \n                    Seminarist\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Michael Persiianov\n                    \n                    Seminarist\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Arina Kosovskaia\n                    \n                    Senior Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Daniil Radushev\n                    \n                    Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Maria Medvedeva\n                    \n                    Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Alina Potemkina\n                    \n                    Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Oleg Kurilov\n                    \n                    Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Sabina Akilova\n                    \n                    Assistant\n                  \n                \n              \n        \n            \n                \n                  \n                    \n                  \n                  \n                    \n                      Svetlana Mikhailova\n                    \n                    Assistant\n                  \n                \n              \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "",
    "section": "",
    "text": "Class 1\n    \n        üìÑ Materials ‚Ä¢ üìù Notes ‚Ä¢ üë∑‚Äç‚ôÇÔ∏è Seminar ‚Ä¢ ‚ñ∂Ô∏è Youtube ‚Ä¢ üíø Download\n    \n    –í—Å–ø–æ–º–∏–Ω–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é –∞–ª–≥–µ–±—Ä—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è. –°–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –û–¥–Ω–æ–º–µ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è. –ù–µ—Ç–æ—á–Ω–∞—è –æ–¥–Ω–æ–º–µ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.\n\n    Class 2\n    \n        \n    \n    –ì—Ä–∞–¥–∏–µ–Ω—Ç. –ì–µ—Å—Å–∏–∞–Ω. –ú–∞—Ç—Ä–∏—á–Ω–æ-–≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ. –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ.\n\n    Class 3\n    \n        \n    \n    –í—ã–ø—É–∫–ª–æ—Å—Ç—å. –í—ã–ø—É–∫–ª—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞. –í—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ô–µ–Ω—Å–µ–Ω–∞. –°–∏–ª—å–Ω–æ –≤—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –£—Å–ª–æ–≤–∏–µ –ü–æ–ª—è–∫–∞ - –õ–æ—è—Å–∏–µ–≤–∏—á–∞.\n\n    Class 4\n    \n        \n    \n    –£—Å–ª–æ–≤–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏. –§—É–Ω–∫—Ü–∏—è –õ–∞–≥—Ä–∞–Ω–∂–∞. –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –õ–∞–≥—Ä–∞–Ω–∂–∞. –¢–µ–æ—Ä–µ–º–∞ –ö–∞—Ä—É—à–∞ - –ö—É–Ω–∞ - –¢–∞–∫–∫–µ—Ä–∞.\n\n    Class 5\n    \n        \n    \n    –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –í–≤–µ–¥–µ–Ω–∏–µ –≤ –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞. –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n    Class 6\n    \n        \n    \n    –ó–∞–¥–∞—á–∞ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥.\n\n    Class 7\n    \n        \n    \n    –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫. –¢–µ–æ—Ä–µ–º—ã —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –≥–ª–∞–¥–∫–æ–º —Å–ª—É—á–∞–µ (–≤—ã–ø—É–∫–ª—ã–µ, —Å–∏–ª—å–Ω–æ –≤—ã–ø—É–∫–ª—ã–µ, PL). –í–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n    Class 8\n    \n        \n    \n    –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã. –ú–µ—Ç–æ–¥ –ü–æ–ª—è–∫–∞, –ù–µ—Å—Ç–µ—Ä–æ–≤–∞.\n\n    Class 9\n    \n        \n    \n    –°—É–±–≥—Ä–∞–¥–∏–µ–Ω—Ç. –°—É–±–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª. –°—É–±–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫. –¢–µ–æ—Ä–µ–º—ã —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –Ω–µ–≥–ª–∞–¥–∫–æ–º —Å–ª—É—á–∞–µ. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–µ–≥–ª–∞–¥–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö.\n\n    Class 10\n    \n        \n    \n    –ú–µ—Ç–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.\n\n    Class 11\n    \n        \n    \n    –ü—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –º–µ—Ç–æ–¥. –ú–µ—Ç–æ–¥ –§—Ä–∞–Ω–∫-–í—É–ª—å—Ñ–∞. –ú–µ—Ç–æ–¥ –ø—Ä–æ–µ–∫—Ü–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞.\n\n    Class 12\n    \n        \n    \n    –ú–µ—Ç–æ–¥ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞. –ú–µ—Ç–æ–¥ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞. K-FAC.\n\n    Class 13\n    \n        \n    \n    –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞. –ö–≤–∞–∑–∏–Ω—å—é—Ç–æ–Ω–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã.\n\n    Class 14\n    \n        \n    \n    –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–æ—á–∫–∏.\n\n    Class 15\n    \n        \n    \n    –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: AdaDelta, RMSProp, Adam, Nadam.\n\n    Class 16\n    \n        \n    \n    –ú–µ—Ç–æ–¥—ã —Ä–µ–¥—É–∫—Ü–∏–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏: SAG, SVRG, SAGA.\n\n    Class 17\n    \n        \n    \n    –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –¥–∏—Ñ—Ñ—É–∑–∏—è. –ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n    Class 18\n    \n        \n    \n    –°–µ–¥–ª–æ–≤—ã–µ –∑–∞–¥–∞—á–∏. –ú–∏–Ω–∏–º–∞–∫—Å. –û–±—É—á–µ–Ω–∏–µ GAN.\n\n    Class 19\n    \n        \n    \n    –û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. Neural Tangent Kernel. Mode connectivity.\n\n    Class 20\n    \n        \n    \n    –í–æ–ø—Ä–æ—Å—ã –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π. Lars, Lamb. –†–∞—Å–ø–∏—Å–∞–Ω–∏—è learning rate. Warm-up. –ö–ª–∏–ø–ø–∏–Ω–≥.\n\n\nNo matching items"
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "",
    "section": "",
    "text": "Linear algebra basics\n\nProve that the matrix xy^T has rank equals to one.\nFind SVD of the following matrices:\n\nA = \\begin{bmatrix} 1\\\\2\\\\3 \\end{bmatrix}\nA = \\begin{bmatrix} 1 & 4\\\\4 & 8\\\\3 & 8 \\end{bmatrix}\nA = \\begin{bmatrix} 0 & 0\\\\x & 0\\\\0 & 0 \\end{bmatrix}, where x is the sum of your birthdate numbers (day + month)\n\nAssume we have a set of data points x^{(i)}\\in\\mathbb{R}^{n},\\,i=1,\\dots,m, and decide to represent this data as a matrix\n\nX =\n     \\begin{pmatrix}\n     | & & | \\\\\n     x^{(1)} & \\dots & x^{(m)} \\\\\n     | & & | \\\\\n     \\end{pmatrix} \\in \\mathbb{R}^{n \\times m}.\n\nWe suppose that \\text{rank}\\,X = r.\nIn the problem below, we ask you to find the rank of some matrix M related to X. In particular, you need to find relation between \\text{rank}\\,X = r and \\text{rank}\\,M, e.g., that the rank of M is always larger/smaller than the rank of X or that \\text{rank}\\,M = \\text{rank}\\,X \\big / 35. Please support your answer with legitimate arguments and make the answer as accurate as possible.\nNote that depending on the structure of the matrix X, border cases are possible. Make sure to cover them in your answer correctly.\nIn applied statistics and machine learning, data is often normalized. One particularly popular strategy is to subtract the estimated mean \\mu and divide by the square root of the estimated variance \\sigma^2. i.e.\n\nx \\rightarrow (x - \\mu) \\big / \\sigma.\n\nAfter the normalization, we get a new matrix\n\n     \\begin{split}\n     Y &:=\n     \\begin{pmatrix}\n         | & & | \\\\\n         y^{(1)} & \\dots & y^{(m)} \\\\\n         | & & | \\\\\n     \\end{pmatrix},\\\\\n     y^{(i)} &:= \\frac{x^{(i)} - \\frac{1}{m}\\sum_{i=1}^{m} x^{(i)}}{\\sqrt{\\frac{1}{m}\\sum_{i=1}^{m} \\left(x^{(i)}\\right)^2 - \\left(\\frac{1}{m}\\sum_{i=1}^{m} x^{(i)}\\right)^2}}.\n     \\end{split}\n\nWhat is the rank of Y if \\text{rank} \\; X = r?\nImage Compression with Truncated SVD Explore image compression using Truncated Singular Value Decomposition (SVD). Understand how varying the number of singular values affects the quality of the compressed image. Implement a Python script to compress a grayscale image using Truncated SVD and visualize the compression quality.\n\nTruncated SVD: Decomposes an image A into U, S, and V matrices. The compressed image is reconstructed using a subset of singular values.\nMathematical Representation: \nA \\approx U_k \\Sigma_k V_k^T\n\n\nU_k and V_k are the first k columns of U and V, respectively.\n\\Sigma_k is a diagonal matrix with the top k singular values.\nRelative Error: Measures the fidelity of the compressed image compared to the original.\n\n\n  \\text{Relative Error} = \\frac{\\| A - A_k \\|}{\\| A \\|}\n  \n\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport numpy as np\nfrom skimage import io, color\nimport requests\nfrom io import BytesIO\n\ndef download_image(url):\n    response = requests.get(url)\n    img = io.imread(BytesIO(response.content))\n    return color.rgb2gray(img)  # Convert to grayscale\n\ndef update_plot(i, img_plot, error_plot, U, S, V, original_img, errors, ranks, ax1, ax2):\n    # Adjust rank based on the frame index\n    if i &lt; 70:\n        rank = i + 1\n    else:\n        rank = 70 + (i - 69) * 10\n\n\n    reconstructed_img = ... # YOUR CODE HERE \n\n    # Calculate relative error\n    relative_error = ... # YOUR CODE HERE\n    errors.append(relative_error)\n    ranks.append(rank)\n\n    # Update the image plot and title\n    img_plot.set_data(reconstructed_img)\n    ax1.set_title(f\"Image compression with SVD\\n Rank {rank}; Relative error {relative_error:.2f}\")\n\n    # Remove axis ticks and labels from the first subplot (ax1)\n    ax1.set_xticks([])\n    ax1.set_yticks([])\n\n    # Update the error plot\n    error_plot.set_data(ranks, errors)\n    ax2.set_xlim(1, len(S))\n    ax2.grid(linestyle=\":\")\n    ax2.set_ylim(1e-4, 0.5)\n    ax2.set_ylabel('Relative Error')\n    ax2.set_xlabel('Rank')\n    ax2.set_title('Relative Error over Rank')\n    ax2.semilogy()\n\n    # Set xticks to show rank numbers\n    ax2.set_xticks(range(1, len(S)+1, max(len(S)//10, 1)))  # Adjust the step size as needed\n    plt.tight_layout()\n\n    return img_plot, error_plot\n\n\ndef create_animation(image, filename='svd_animation.mp4'):\n    U, S, V = np.linalg.svd(image, full_matrices=False)\n    errors = []\n    ranks = []\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(5, 8))\n    img_plot = ax1.imshow(image, cmap='gray', animated=True)\n    error_plot, = ax2.plot([], [], 'r-', animated=True)  # Initial empty plot for errors\n\n    # Add watermark\n    ax1.text(1, 1.02, '@fminxyz', transform=ax1.transAxes, color='gray', va='bottom', ha='right', fontsize=9)\n\n    # Determine frames for the animation\n    initial_frames = list(range(70))  # First 70 ranks\n    subsequent_frames = list(range(70, len(S), 10))  # Every 10th rank after 70\n    frames = initial_frames + subsequent_frames\n\n    ani = animation.FuncAnimation(fig, update_plot, frames=len(frames), fargs=(img_plot, error_plot, U, S, V, image, errors, ranks, ax1, ax2), interval=50, blit=True)\n    ani.save(filename, writer='ffmpeg', fps=8, dpi=300)\n\n# URL of the image\nurl = \"\"\n\n# Download the image and create the animation\nimage = download_image(url)\ncreate_animation(image)\n\n\n\nConvergence rates\n\nDetermine the convergence or divergence of the given sequences\n\nr_{k} = k^{\\frac{1}{2}}.\nr_{k} = \\frac{1}{\\sqrt{k}}.\nr_{k} = 0.808^k.\nr_{k} = 0.808^{2^k}.\n\nDetermine the following sequence \\{r_k\\} by convergence rate (linear, sublinear, superlinear). In the case of superlinear convergence, additionally, find out whether there is quadratic convergence.\n\nr_k = \\dfrac{1}{k!}\n\nDetermine the convergence or divergence of a given sequence r_k =\\begin{cases} \\frac{1}{k}, & \\text{if } k\\text{ is even} \\\\ e^{-k}, & \\text{if } k\\text{ is odd} \\end{cases}.\nDetermine the convergence or divergence of a given sequence r_k =\\begin{cases} \\left(\\frac{1}{4}\\right)^{2^k}, & \\text{if } k\\text{ is even} \\\\ \\frac{x_{k-1}}{k}, & \\text{if } k\\text{ is odd} \\end{cases}.\nLet \\{r_k\\} be a sequence of non-negative numbers given as r_{k+1} = Mr_k^2, where M &gt; 0, r_0 \\geq 0. Establish a necessary and sufficient condition on M and r_0 under which the sequence r_k will converge to zero. What is the rate of convergence?\nLet \\left\\{ r_k \\right\\}_{k=m}^\\infty be a sequence of non-negative numbers and let s &gt; 0 be some integer. Prove that sequence \\left\\{ r_k \\right\\}_{k=m+s}^\\infty is linearly convergent with constant q if and only if a the sequence \\left\\{ r_k \\right\\}_{k=m}^\\infty converged linearly with constant q."
  }
]